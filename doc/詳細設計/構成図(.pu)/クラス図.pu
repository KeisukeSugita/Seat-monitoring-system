@startuml クラス図
left to right direction

package 座席監視アプリ {
    class "SeatMonitoringApplication" as SeatMonitoringApplication {
        + main():void
    }

    class "Configration" as ClientConfigration {
		- ipAddress:string
        + Configration()
        - initialize():void
        + getIpAddress():string
    }

	class "Screen" as Screen {
        + show(Configration):void
        + update(List<SeatStatus>):void
		+ close():void
    }

    class "SeatMonitoringApiClient" as SeatMonitoringApiClient {
        + get(Configration):List<SeatStatus>
    }

    class "RegularNortifier" as RegularNortifier {
        - destination:delegate
        - stopFlag:boolean
        + RegularNortifier(delegate)
        + start(Configration):void
        + execute(Configration):void
        + stop():void
    }
        note top of RegularNortifier
            ・定期的に座席状態の更新を通知するクラス
            ・コンストラクタで通知先を登録する
            ・executeメソッドから1分毎に座席の状態をdestinationに通知する
        end note

    class "SeatStatus" as SeatStatus {
        - seatName:string
        - humanExist:boolean
        + SeatStatus(string, boolean)
        - setSeatName(string):void
        - setHumanexist(boolean):void
        + getSeatName():string
        + getHumanexist():boolean
            }
}

package SeatMonitoringApi {
    class "SeatsController" as SeatsController {
        - configration:Configration
        + initialize():void
        + seats():座席情報のオブジェクト
    }
    
    class "Configration" as ServerConfigration {
        - seatsInformation:List<seatInformation>
        + Configration()
        - initialize():void
        + getConfigration():Congfigration
    }

    class "Photographer" as Photographer {
        + shoot(Configration):void
    }
        note right of Photographer
            ・Configrationのmonikerを読み込み、
            　そのカメラから画像を取得するクラス
            ・取得した画像はConfigrationのpictureに格納する
        end note
    
    class "SeatInformation" as SeatInformation {
        - seatName:string
        - humanExist:boolean
        - moniker:string
        - picture:Bitmap
        + SeatInformation(string, string)
        - setSeatName(string):void
        - setMoniker(string):void
        + setHumanexist(boolean):void
        + setPicture(Bitmap):void
        + getSeatName():string
        + getMoniker():string
        + getHumanexist():boolean
        + getPicture():Bitmap
    }
    
    class "HumanDetector" as CsHumanDetector {
        + execute(Configration):void
    }
        note right of CsHumanDetector
            ・Configrationのpictureを読み込み、
            　その画像に人が写っているかを判定するクラス
            ・実際に判定を行っているのはC++のプログラム
            　(CppDll:HumanDetector)
            ・判定結果はConfigrationのhumanExistに格納する
        end note
}

package CppDll {
    class "HumanDetector" as CppHumanDetector {
        + execute(picture):boolean
    }
}

SeatMonitoringApplication -> ClientConfigration
SeatMonitoringApplication -left-> Screen
Screen -down-> RegularNortifier
RegularNortifier -down-> SeatMonitoringApiClient
RegularNortifier .> ClientConfigration
RegularNortifier .left.> SeatStatus
Screen .> SeatStatus
Screen .> ClientConfigration
SeatMonitoringApiClient .left.> ClientConfigration
SeatMonitoringApiClient "1"-left->"0..10" SeatStatus
SeatMonitoringApiClient -down-> SeatsController
ServerConfigration "1"*-down-"0..10" SeatInformation
SeatsController -> ServerConfigration
SeatsController --> Photographer
SeatsController --> CsHumanDetector
CppHumanDetector <-- CsHumanDetector
Photographer .> ServerConfigration
CsHumanDetector .> ServerConfigration

@enduml