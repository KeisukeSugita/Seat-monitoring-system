@startuml 座席状態確認シーケンス図2
hide footbox
skinparam BoxPadding 20

box "座席監視アプリ"
	participant PeriodicNotifier
	participant SeatMonitoringApiClient
	participant "Seat" as ClientSeat
	participant Screen
end box

box "SeatMonitoringAPI"
	participant SeatsController
	participant SeatsApiManager
	participant Configuration
	participant "Seat" as ServerSeat
	participant Camera
	participant "HumanDetector" as CsHumanDetector
	participant SeatsApiResult
end box

box "CppDll"
	participant "HumanDetector" as CppHumanDetector
end box

-> PeriodicNotifier :Start(Configratinon)
note right
	座席監視アプリのConfigurationクラスは
	接続するサーバのIPアドレスをメンバに持つ
end note

PeriodicNotifier -> PeriodicNotifier : SeatMonitoringThread(Configuration)\n非同期呼び出し
activate PeriodicNotifier

note over Configuration, ServerSeat
	SeatMonitoringAPIのConfigurationクラスは
	Seatクラスのリストをメンバに持つ

	Seatクラスは以下のメンバを持つ
	・name(監視座席名)
	・moniker(モニカ(デバイスインスタンスパス))
end note

create SeatMonitoringApiClient
PeriodicNotifier -> SeatMonitoringApiClient :new SeatMonitoringApiClient(ipAddress:string)

loop stopFlagがfalseの間
	PeriodicNotifier -> SeatMonitoringApiClient : GetSeats()
	activate SeatMonitoringApiClient

	SeatMonitoringApiClient -> SeatsController : GetSeats() [HTTPリクエスト]
	activate SeatsController

	SeatsController -> SeatsApiManager :Execute()
	activate SeatsApiManager

	SeatsApiManager -> Configuration :GetSeats()
	activate Configuration
	SeatsApiManager <- Configuration :"List<ServerSeat>"
	deactivate Configuration

	|||
	create Camera
	SeatsApiManager -> Camera : new

	create CsHumanDetector
	SeatsApiManager -> CsHumanDetector :new

	create CppHumanDetector
	SeatsApiManager -> CppHumanDetector :new


	loop 監視座席数
		SeatsApiManager -> ServerSeat :GetMoniker()
		activate ServerSeat
		SeatsApiManager <- ServerSeat :"string"
		deactivate ServerSeat
		SeatsApiManager -> Camera : Shoot(Configuration)
		activate Camera
		|||
		SeatsApiManager <- 	Camera :"Bitmap"
		deactivate Camera
		note right
			monikerでカメラを指定して画像を取得する
		end note

		SeatsApiManager -> CsHumanDetector :Detect(Bitmap)
		activate CsHumanDetector
		CsHumanDetector -> CppHumanDetector : Detect(unsigned char[])
		activate CppHumanDetector
		CsHumanDetector <- CppHumanDetector : "boolean"
		deactivate CppHumanDetector
		SeatsApiManager <- CsHumanDetector :"boolean"
		deactivate CsHumanDetector
		note right
			画像に人が写っているかを判定する
		end note

		SeatsApiManager -> ServerSeat :GetName()
		activate ServerSeat
		SeatsApiManager <- ServerSeat :"string"
		deactivate ServerSeat
		
		create SeatsApiResult
		SeatsApiManager -> SeatsApiResult :new SeatsApiResult(name:string, humanExists:boolean)
		
	end
	note over Camera
		List<SeatsApiResult>(監視座席名と画像の判定結果のリスト)を作成する
	end note
	|||

	SeatsController <- SeatsApiManager : List<SeatsApiResult>
	deactivate SeatsApiManager

	SeatMonitoringApiClient <- SeatsController :srting
	deactivate SeatsController

	loop 監視座席数
		create ClientSeat
		SeatMonitoringApiClient -> ClientSeat :Seat(name:string, humanExists:boolean)
	end
	note right
		監視座席数分のインスタンスのリストを作成する
		SeatのコンストラクタはnameとhumanExistsを
		引数に受け取って初期化を行う
	end note

	PeriodicNotifier <- SeatMonitoringApiClient : "List<Seat>"
	deactivate SeatMonitoringApiClient
	|||
	PeriodicNotifier -> Screen : Update(List<Seat>)
	activate Screen
	PeriodicNotifier <- Screen
	deactivate Screen
	deactivate PeriodicNotifier
	note right
		updateメソッド終了までの処理時間を計測し、
		loop内の処理時間が60秒になるように待機する処理を行う
		SeatMonitoringAPIからのレスポンスが60秒以上無かった場合、
		タイムアウトとして画面にはサーバ接続エラーアイコンを表示し、
		待機処理を行わず次のループ処理を行う
	end note
end

@enduml